{
  "address": "0x3c1E81A6B8D9b2332B9536F88f5D2b39a5F7E52C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "int24",
          "name": "timeWeightedAverageTick",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "oracleConsultPeriod",
          "type": "uint32"
        }
      ],
      "name": "getOutAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getOutAmountsCurTick",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "bytes32",
          "name": "initCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        },
        {
          "internalType": "uint128",
          "name": "baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        }
      ],
      "name": "getQuoteAtTick",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xee33e29632ad237ad2e07167f74c709ae53cea9b6342592eaf3c9ffcd130038f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1314638",
    "logsBloom": "0x
    "blockHash": "0x1c8a20b661a8f198ceb9541324f335b7a43183614e611f17e698603b94eb910d",
    "transactionHash": "0xee33e29632ad237ad2e07167f74c709ae53cea9b6342592eaf3c9ffcd130038f",
    "logs": [],
    "blockNumber": 21425,
    "cumulativeGasUsed": "1314638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab08977d021f44c9b855b887ce31da00",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"timeWeightedAverageTick\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"oracleConsultPeriod\",\"type\":\"uint32\"}],\"name\":\"getOutAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getOutAmountsCurTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getQuoteAtTick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"consult(address,uint32)\":{\"params\":{\"period\":\"Number of seconds in the past to start calculating time-weighted average\",\"pool\":\"Address of Uniswap V3 pool that we want to observe\"},\"returns\":{\"timeWeightedAverageTick\":\"The time-weighted average tick from (block.timestamp - period) to block.timestamp\"}},\"getQuoteAtTick(int24,uint128,address,address)\":{\"params\":{\"baseAmount\":\"Amount of token to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\",\"tick\":\"Tick value used to calculate the quote\"},\"returns\":{\"quoteAmount\":\"Amount of quoteToken received for baseAmount of baseToken\"}}},\"title\":\"Oracle library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"consult(address,uint32)\":{\"notice\":\"Fetches time-weighted average tick using Uniswap V3 oracle\"},\"getQuoteAtTick(int24,uint128,address,address)\":{\"notice\":\"Given a tick and a token amount, calculates the amount of token received in exchange\"}},\"notice\":\"Provides functions to integrate with V3 pool oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/OracleLibrary.sol\":\"OracleLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.8.0;\\n// pragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_start + 2 >= _start, 'toUint16_overflow');\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_start + 32 >= _start, 'toUint256_overflow');\\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x6b02331eb3fed50b949d7584959d49121e43e4baaee451e6663709c20001fb8e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // Handle division by zero\\n        require(denominator > 0);\\n\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            // require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // 2022.0314.modified\\n        //uint256 twos = -denominator & denominator;\\n        //uint256 twos = denominator & (~denominator + 1);\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1cb334770aafba8747f54d6ec0766049ab5f2174025f97ec0ada5e99c665c73\",\"license\":\"MIT\"},\"contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport '../libraries/FullMath.sol';\\nimport '../libraries/TickMath.sol';\\nimport '../libraries/SafeCast.sol';\\nimport '../libraries/PoolAddressTokamak.sol';\\nimport '../libraries/Path.sol';\\n\\n// import \\\"hardhat/console.sol\\\";\\ninterface IIIUniswapV3Pool {\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n}\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    using Path for bytes;\\n    using SafeCast for uint256;\\n\\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\n    function consult(address pool, uint32 period) public view returns (int24 timeWeightedAverageTick) {\\n        require(period != 0, 'BP');\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = period;\\n        secondAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, ) = IIIUniswapV3Pool(pool).observe(secondAgos);\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / int56( int32(period) ));\\n\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56( int32(period) ) != 0)) timeWeightedAverageTick--;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) public pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    function getPool(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) public pure returns (address) {\\n        return (\\n            PoolAddressTokamak.computeAddress(\\n                factory,\\n                PoolAddressTokamak.getPoolKey(tokenA, tokenB, fee),\\n                PoolAddressTokamak.POOL_INIT_CODE_HASH));\\n    }\\n\\n    function getPool(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee,\\n        bytes32 initCodeHash\\n    ) public pure returns (address) {\\n        return (PoolAddressTokamak.computeAddress(factory, PoolAddressTokamak.getPoolKey(tokenA, tokenB, fee), initCodeHash));\\n    }\\n\\n    function getOutAmounts(address factory, bytes memory _path, uint256 _amountIn, uint32 oracleConsultPeriod)\\n        public view returns (uint256 amountOut)\\n    {\\n        // uint256 count = _path.numPools();\\n        uint256 i = 0;\\n        uint256 amountIn = _amountIn;\\n        bytes memory path = _path;\\n        while (true) {\\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\\n\\n            address pool = getPool(factory, tokenIn, tokenOut, fee);\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            uint256 _amountOut = getQuoteAtTick(\\n                consult(pool, oracleConsultPeriod),\\n                uint128(amountIn),\\n                tokenIn,\\n                tokenOut\\n            );\\n\\n            amountIn = _amountOut;\\n            i++;\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return (amountIn);\\n            }\\n        }\\n    }\\n\\n    function getOutAmountsCurTick(address factory, bytes memory _path, uint256 _amountIn)\\n        public view returns (uint256 amountOut)\\n    {\\n\\n        uint256 amountIn = _amountIn;\\n        bytes memory path = _path;\\n        while (true) {\\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\\n\\n            address pool = getPool(factory, tokenIn, tokenOut, fee);\\n\\n            (,int24 tick,,,,,) = IIIUniswapV3Pool(pool).slot0();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            uint256 _amountOut = getQuoteAtTick(\\n                tick,\\n                uint128(amountIn),\\n                tokenIn,\\n                tokenOut\\n            );\\n\\n            amountIn = _amountOut;\\n\\n            // decide whether to continue or terminate\\n            if (path.hasMultiplePools()) {\\n                path = path.skipToken();\\n            } else {\\n                return (amountIn);\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xce1743820a305aa02b4a0806c0983c468ca931d64ff84aa54dc8b8d6c663d712\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '../libraries/BytesLib.sol';\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0x0ec5d401bdcc4ad2dffaac8bd1225ae1429d1621ce68b10b696d2f0d02ef2bda\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/PoolAddressTokamak.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddressTokamak {\\n    // bytes32 public constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n    bytes32 public constant POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key, bytes32 initCodeHash) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        initCodeHash\\n                    )\\n                )\\n            ))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2cdebd2a64e140f91d3fa1113ed48dfecadb943aec785427a5534a297a88e658\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x26d00a1887da22d534f99520148ded3e765aa1190626690bbbb207fd7d880110\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xf0937fde85c8fe12e58d9e38092cd67518c7be9ffcd26b49d254d7e980eaa375\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6116c761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806343c57a27146100715780634e6c8ed81461009757806382413489146100c257806393eaab8a146100e85780639d849295146100fb578063a033a11a1461010e575b600080fd5b61008461007f366004610f5e565b610121565b6040519081526020015b60405180910390f35b6100aa6100a5366004610fde565b61022f565b6040516001600160a01b03909116815260200161008e565b6100d56100d036600461104c565b610271565b60405160029190910b815260200161008e565b6100846100f6366004611138565b610435565b6100aa610109366004611191565b61051d565b61008461011c3660046111f3565b61053e565b60008061012d866105c9565b90506001600160801b036001600160a01b038216116101b357600061015b6001600160a01b03831680611268565b9050836001600160a01b0316856001600160a01b0316106101935761018e600160c01b876001600160801b0316836109e1565b6101ab565b6101ab81876001600160801b0316600160c01b6109e1565b925050610226565b60006101d26001600160a01b03831680680100000000000000006109e1565b9050836001600160a01b0316856001600160a01b03161061020a57610205600160801b876001600160801b0316836109e1565b610222565b61022281876001600160801b0316600160801b6109e1565b9250505b50949350505050565b600061026685610240868686610aa9565b7fa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff610b14565b90505b949350505050565b60008163ffffffff166000036102b35760405162461bcd60e51b8152602060048201526002602482015261042560f41b60448201526064015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905082816000815181106102e8576102e8611287565b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061031757610317611287565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd9061035b90859060040161129d565b600060405180830381865afa158015610378573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a0919081019061137f565b5090506000816000815181106103b8576103b8611287565b6020026020010151826001815181106103d3576103d3611287565b60200260200101516103e5919061144b565b90506103f5600386900b826114b1565b935060008160060b1280156104195750610413600386900b826114ef565b60060b15155b1561042c578361042881611511565b9450505b50505092915050565b600081835b600080600061044884610bd5565b925092509250600061045c8a85858561022f565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190611546565b505050505091505060006104d882898888610121565b90508097506104e687610c11565b156104fb576104f487610c4b565b965061050b565b8798505050505050505050610516565b50505050505061043a565b9392505050565b60006105348661052e878787610aa9565b84610b14565b9695505050505050565b60008083855b600080600061055284610bd5565b92509250925060006105668c85858561022f565b9050600061057f610577838c610271565b888787610121565b96508690508761058e816115e3565b98505061059a86610c11565b156105af576105a886610c4b565b95506105bf565b8698505050505050505050610269565b5050505050610544565b60008060008360020b126105e0578260020b6105ed565b8260020b6105ed906115fc565b90506105fc620d89e719611618565b60020b8111156106325760405162461bcd60e51b81526020600482015260016024820152601560fa1b60448201526064016102aa565b60008160011660000361064957600160801b61065b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561069a576080610695826ffff97272373d413259a46990580e213a611268565b901c90505b60048216156106c45760806106bf826ffff2e50f5f656932ef12357cf3c7fdcc611268565b901c90505b60088216156106ee5760806106e9826fffe5caca7e10e4e61c3624eaa0941cd0611268565b901c90505b6010821615610718576080610713826fffcb9843d60f6159c9db58835c926644611268565b901c90505b602082161561074257608061073d826fff973b41fa98c081472e6896dfb254c0611268565b901c90505b604082161561076c576080610767826fff2ea16466c96a3843ec78b326b52861611268565b901c90505b6080821615610796576080610791826ffe5dee046a99a2a811c461f1969c3053611268565b901c90505b6101008216156107c15760806107bc826ffcbe86c7900a88aedcffc83b479aa3a4611268565b901c90505b6102008216156107ec5760806107e7826ff987a7253ac413176f2b074cf7815e54611268565b901c90505b610400821615610817576080610812826ff3392b0822b70005940c7a398e4b70f3611268565b901c90505b61080082161561084257608061083d826fe7159475a2c29b7443b29c7fa6e889d9611268565b901c90505b61100082161561086d576080610868826fd097f3bdfd2022b8845ad8f792aa5825611268565b901c90505b612000821615610898576080610893826fa9f746462d870fdf8a65dc1f90e061e5611268565b901c90505b6140008216156108c35760806108be826f70d869a156d2a1b890bb3df62baf32f7611268565b901c90505b6180008216156108ee5760806108e9826f31be135f97d08fd981231505542fcfa6611268565b901c90505b6201000082161561091a576080610915826f09aa508b5b7a84e1c677de54f3e99bc9611268565b901c90505b62020000821615610945576080610940826e5d6af8dedb81196699c329225ee604611268565b901c90505b6204000082161561096f57608061096a826d2216e584f5fa1ea926041bedfe98611268565b901c90505b62080000821615610997576080610992826b048a170391f7dc42444e8fa2611268565b901c90505b60008460020b13156109b2576109af8160001961163a565b90505b6109c16401000000008261164e565b156109cd5760016109d0565b60005b6102699060ff16602083901c611662565b60008082116109ef57600080fd5b60008060001985870985870292508281108382030391505080600003610a1a57508290049050610516565b808411610a2657600080fd5b600084868809808403938111909203919050600085610a478160001961167a565b610a52906001611662565b16958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115610ae4579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600082602001516001600160a01b031683600001516001600160a01b031610610b3c57600080fd5b50815160208084015160409485015185516001600160a01b0394851681850152939091168386015262ffffff166060808401919091528451808403820181526080840186528051908301206001600160f81b031960a085015295901b6bffffffffffffffffffffffff191660a183015260b582019490945260d5808201929092528251808203909201825260f501909152805191012090565b60008080610be38482610c82565b9250610bf0846014610d36565b9050610c08610c0160036014611662565b8590610c82565b91509193909250565b6000610c1f60036014611662565b6014610c2c600382611662565b610c369190611662565b610c409190611662565b825110159050919050565b6060610c7c610c5c60036014611662565b610c6860036014611662565b8451610c74919061167a565b849190610de1565b92915050565b600081610c90816014611662565b1015610cd35760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016102aa565b610cde826014611662565b83511015610d265760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016102aa565b500160200151600160601b900490565b600081610d44816003611662565b1015610d865760405162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b60448201526064016102aa565b610d91826003611662565b83511015610dd85760405162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b60448201526064016102aa565b50016003015190565b606081610def81601f611662565b1015610e2e5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102aa565b82610e398382611662565b1015610e785760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102aa565b610e828284611662565b84511015610ec65760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016102aa565b606082158015610ee55760405191506000825260208201604052610226565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610f1e578051835260209283019201610f06565b5050858452601f01601f19166040525050949350505050565b8060020b8114610f4657600080fd5b50565b6001600160a01b0381168114610f4657600080fd5b60008060008060808587031215610f7457600080fd5b8435610f7f81610f37565b935060208501356001600160801b0381168114610f9b57600080fd5b92506040850135610fab81610f49565b91506060850135610fbb81610f49565b939692955090935050565b803562ffffff81168114610fd957600080fd5b919050565b60008060008060808587031215610ff457600080fd5b8435610fff81610f49565b9350602085013561100f81610f49565b9250604085013561101f81610f49565b915061102d60608601610fc6565b905092959194509250565b803563ffffffff81168114610fd957600080fd5b6000806040838503121561105f57600080fd5b823561106a81610f49565b915061107860208401611038565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110c0576110c0611081565b604052919050565b600082601f8301126110d957600080fd5b813567ffffffffffffffff8111156110f3576110f3611081565b611106601f8201601f1916602001611097565b81815284602083860101111561111b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561114d57600080fd5b833561115881610f49565b9250602084013567ffffffffffffffff81111561117457600080fd5b611180868287016110c8565b925050604084013590509250925092565b600080600080600060a086880312156111a957600080fd5b85356111b481610f49565b945060208601356111c481610f49565b935060408601356111d481610f49565b92506111e260608701610fc6565b949793965091946080013592915050565b6000806000806080858703121561120957600080fd5b843561121481610f49565b9350602085013567ffffffffffffffff81111561123057600080fd5b61123c878288016110c8565b9350506040850135915061102d60608601611038565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561128257611282611252565b500290565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156112db57835163ffffffff16835292840192918401916001016112b9565b50909695505050505050565b600067ffffffffffffffff82111561130157611301611081565b5060051b60200190565b600082601f83011261131c57600080fd5b8151602061133161132c836112e7565b611097565b82815260059290921b8401810191818101908684111561135057600080fd5b8286015b8481101561137457805161136781610f49565b8352918301918301611354565b509695505050505050565b6000806040838503121561139257600080fd5b825167ffffffffffffffff808211156113aa57600080fd5b818501915085601f8301126113be57600080fd5b815160206113ce61132c836112e7565b82815260059290921b840181019181810190898411156113ed57600080fd5b948201945b8386101561141b5785518060060b811461140c5760008081fd5b825294820194908201906113f2565b9188015191965090935050508082111561143457600080fd5b506114418582860161130b565b9150509250929050565b60008160060b8360060b6000811281667fffffffffffff190183128115161561147657611476611252565b81667fffffffffffff01831381161561149157611491611252565b5090039392505050565b634e487b7160e01b600052601260045260246000fd5b60008160060b8360060b806114c8576114c861149b565b667fffffffffffff198214600019821416156114e6576114e6611252565b90059392505050565b60008260060b806115025761150261149b565b808360060b0791505092915050565b60008160020b627fffff19810361152a5761152a611252565b6000190192915050565b805161ffff81168114610fd957600080fd5b600080600080600080600060e0888a03121561156157600080fd5b875161156c81610f49565b602089015190975061157d81610f37565b955061158b60408901611534565b945061159960608901611534565b93506115a760808901611534565b925060a088015160ff811681146115bd57600080fd5b60c089015190925080151581146115d357600080fd5b8091505092959891949750929550565b6000600182016115f5576115f5611252565b5060010190565b6000600160ff1b820161161157611611611252565b5060000390565b60008160020b627fffff19810361163157611631611252565b60000392915050565b6000826116495761164961149b565b500490565b60008261165d5761165d61149b565b500690565b6000821982111561167557611675611252565b500190565b60008282101561168c5761168c611252565b50039056fea2646970667358221220f770c1ad6c9b9901f06b33c70e52f8bc71fabecae4ad9cc02fcba418562e407864736f6c634300080f0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806343c57a27146100715780634e6c8ed81461009757806382413489146100c257806393eaab8a146100e85780639d849295146100fb578063a033a11a1461010e575b600080fd5b61008461007f366004610f5e565b610121565b6040519081526020015b60405180910390f35b6100aa6100a5366004610fde565b61022f565b6040516001600160a01b03909116815260200161008e565b6100d56100d036600461104c565b610271565b60405160029190910b815260200161008e565b6100846100f6366004611138565b610435565b6100aa610109366004611191565b61051d565b61008461011c3660046111f3565b61053e565b60008061012d866105c9565b90506001600160801b036001600160a01b038216116101b357600061015b6001600160a01b03831680611268565b9050836001600160a01b0316856001600160a01b0316106101935761018e600160c01b876001600160801b0316836109e1565b6101ab565b6101ab81876001600160801b0316600160c01b6109e1565b925050610226565b60006101d26001600160a01b03831680680100000000000000006109e1565b9050836001600160a01b0316856001600160a01b03161061020a57610205600160801b876001600160801b0316836109e1565b610222565b61022281876001600160801b0316600160801b6109e1565b9250505b50949350505050565b600061026685610240868686610aa9565b7fa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff610b14565b90505b949350505050565b60008163ffffffff166000036102b35760405162461bcd60e51b8152602060048201526002602482015261042560f41b60448201526064015b60405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905082816000815181106102e8576102e8611287565b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061031757610317611287565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd9061035b90859060040161129d565b600060405180830381865afa158015610378573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103a0919081019061137f565b5090506000816000815181106103b8576103b8611287565b6020026020010151826001815181106103d3576103d3611287565b60200260200101516103e5919061144b565b90506103f5600386900b826114b1565b935060008160060b1280156104195750610413600386900b826114ef565b60060b15155b1561042c578361042881611511565b9450505b50505092915050565b600081835b600080600061044884610bd5565b925092509250600061045c8a85858561022f565b90506000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190611546565b505050505091505060006104d882898888610121565b90508097506104e687610c11565b156104fb576104f487610c4b565b965061050b565b8798505050505050505050610516565b50505050505061043a565b9392505050565b60006105348661052e878787610aa9565b84610b14565b9695505050505050565b60008083855b600080600061055284610bd5565b92509250925060006105668c85858561022f565b9050600061057f610577838c610271565b888787610121565b96508690508761058e816115e3565b98505061059a86610c11565b156105af576105a886610c4b565b95506105bf565b8698505050505050505050610269565b5050505050610544565b60008060008360020b126105e0578260020b6105ed565b8260020b6105ed906115fc565b90506105fc620d89e719611618565b60020b8111156106325760405162461bcd60e51b81526020600482015260016024820152601560fa1b60448201526064016102aa565b60008160011660000361064957600160801b61065b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff169050600282161561069a576080610695826ffff97272373d413259a46990580e213a611268565b901c90505b60048216156106c45760806106bf826ffff2e50f5f656932ef12357cf3c7fdcc611268565b901c90505b60088216156106ee5760806106e9826fffe5caca7e10e4e61c3624eaa0941cd0611268565b901c90505b6010821615610718576080610713826fffcb9843d60f6159c9db58835c926644611268565b901c90505b602082161561074257608061073d826fff973b41fa98c081472e6896dfb254c0611268565b901c90505b604082161561076c576080610767826fff2ea16466c96a3843ec78b326b52861611268565b901c90505b6080821615610796576080610791826ffe5dee046a99a2a811c461f1969c3053611268565b901c90505b6101008216156107c15760806107bc826ffcbe86c7900a88aedcffc83b479aa3a4611268565b901c90505b6102008216156107ec5760806107e7826ff987a7253ac413176f2b074cf7815e54611268565b901c90505b610400821615610817576080610812826ff3392b0822b70005940c7a398e4b70f3611268565b901c90505b61080082161561084257608061083d826fe7159475a2c29b7443b29c7fa6e889d9611268565b901c90505b61100082161561086d576080610868826fd097f3bdfd2022b8845ad8f792aa5825611268565b901c90505b612000821615610898576080610893826fa9f746462d870fdf8a65dc1f90e061e5611268565b901c90505b6140008216156108c35760806108be826f70d869a156d2a1b890bb3df62baf32f7611268565b901c90505b6180008216156108ee5760806108e9826f31be135f97d08fd981231505542fcfa6611268565b901c90505b6201000082161561091a576080610915826f09aa508b5b7a84e1c677de54f3e99bc9611268565b901c90505b62020000821615610945576080610940826e5d6af8dedb81196699c329225ee604611268565b901c90505b6204000082161561096f57608061096a826d2216e584f5fa1ea926041bedfe98611268565b901c90505b62080000821615610997576080610992826b048a170391f7dc42444e8fa2611268565b901c90505b60008460020b13156109b2576109af8160001961163a565b90505b6109c16401000000008261164e565b156109cd5760016109d0565b60005b6102699060ff16602083901c611662565b60008082116109ef57600080fd5b60008060001985870985870292508281108382030391505080600003610a1a57508290049050610516565b808411610a2657600080fd5b600084868809808403938111909203919050600085610a478160001961167a565b610a52906001611662565b16958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030260008290038290046001019490940294049390931791909102925050509392505050565b6040805160608101825260008082526020820181905291810191909152826001600160a01b0316846001600160a01b03161115610ae4579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600082602001516001600160a01b031683600001516001600160a01b031610610b3c57600080fd5b50815160208084015160409485015185516001600160a01b0394851681850152939091168386015262ffffff166060808401919091528451808403820181526080840186528051908301206001600160f81b031960a085015295901b6bffffffffffffffffffffffff191660a183015260b582019490945260d5808201929092528251808203909201825260f501909152805191012090565b60008080610be38482610c82565b9250610bf0846014610d36565b9050610c08610c0160036014611662565b8590610c82565b91509193909250565b6000610c1f60036014611662565b6014610c2c600382611662565b610c369190611662565b610c409190611662565b825110159050919050565b6060610c7c610c5c60036014611662565b610c6860036014611662565b8451610c74919061167a565b849190610de1565b92915050565b600081610c90816014611662565b1015610cd35760405162461bcd60e51b8152602060048201526012602482015271746f416464726573735f6f766572666c6f7760701b60448201526064016102aa565b610cde826014611662565b83511015610d265760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016102aa565b500160200151600160601b900490565b600081610d44816003611662565b1015610d865760405162461bcd60e51b8152602060048201526011602482015270746f55696e7432345f6f766572666c6f7760781b60448201526064016102aa565b610d91826003611662565b83511015610dd85760405162461bcd60e51b8152602060048201526014602482015273746f55696e7432345f6f75744f66426f756e647360601b60448201526064016102aa565b50016003015190565b606081610def81601f611662565b1015610e2e5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102aa565b82610e398382611662565b1015610e785760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102aa565b610e828284611662565b84511015610ec65760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016102aa565b606082158015610ee55760405191506000825260208201604052610226565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610f1e578051835260209283019201610f06565b5050858452601f01601f19166040525050949350505050565b8060020b8114610f4657600080fd5b50565b6001600160a01b0381168114610f4657600080fd5b60008060008060808587031215610f7457600080fd5b8435610f7f81610f37565b935060208501356001600160801b0381168114610f9b57600080fd5b92506040850135610fab81610f49565b91506060850135610fbb81610f49565b939692955090935050565b803562ffffff81168114610fd957600080fd5b919050565b60008060008060808587031215610ff457600080fd5b8435610fff81610f49565b9350602085013561100f81610f49565b9250604085013561101f81610f49565b915061102d60608601610fc6565b905092959194509250565b803563ffffffff81168114610fd957600080fd5b6000806040838503121561105f57600080fd5b823561106a81610f49565b915061107860208401611038565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156110c0576110c0611081565b604052919050565b600082601f8301126110d957600080fd5b813567ffffffffffffffff8111156110f3576110f3611081565b611106601f8201601f1916602001611097565b81815284602083860101111561111b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561114d57600080fd5b833561115881610f49565b9250602084013567ffffffffffffffff81111561117457600080fd5b611180868287016110c8565b925050604084013590509250925092565b600080600080600060a086880312156111a957600080fd5b85356111b481610f49565b945060208601356111c481610f49565b935060408601356111d481610f49565b92506111e260608701610fc6565b949793965091946080013592915050565b6000806000806080858703121561120957600080fd5b843561121481610f49565b9350602085013567ffffffffffffffff81111561123057600080fd5b61123c878288016110c8565b9350506040850135915061102d60608601611038565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561128257611282611252565b500290565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156112db57835163ffffffff16835292840192918401916001016112b9565b50909695505050505050565b600067ffffffffffffffff82111561130157611301611081565b5060051b60200190565b600082601f83011261131c57600080fd5b8151602061133161132c836112e7565b611097565b82815260059290921b8401810191818101908684111561135057600080fd5b8286015b8481101561137457805161136781610f49565b8352918301918301611354565b509695505050505050565b6000806040838503121561139257600080fd5b825167ffffffffffffffff808211156113aa57600080fd5b818501915085601f8301126113be57600080fd5b815160206113ce61132c836112e7565b82815260059290921b840181019181810190898411156113ed57600080fd5b948201945b8386101561141b5785518060060b811461140c5760008081fd5b825294820194908201906113f2565b9188015191965090935050508082111561143457600080fd5b506114418582860161130b565b9150509250929050565b60008160060b8360060b6000811281667fffffffffffff190183128115161561147657611476611252565b81667fffffffffffff01831381161561149157611491611252565b5090039392505050565b634e487b7160e01b600052601260045260246000fd5b60008160060b8360060b806114c8576114c861149b565b667fffffffffffff198214600019821416156114e6576114e6611252565b90059392505050565b60008260060b806115025761150261149b565b808360060b0791505092915050565b60008160020b627fffff19810361152a5761152a611252565b6000190192915050565b805161ffff81168114610fd957600080fd5b600080600080600080600060e0888a03121561156157600080fd5b875161156c81610f49565b602089015190975061157d81610f37565b955061158b60408901611534565b945061159960608901611534565b93506115a760808901611534565b925060a088015160ff811681146115bd57600080fd5b60c089015190925080151581146115d357600080fd5b8091505092959891949750929550565b6000600182016115f5576115f5611252565b5060010190565b6000600160ff1b820161161157611611611252565b5060000390565b60008160020b627fffff19810361163157611631611252565b60000392915050565b6000826116495761164961149b565b500490565b60008261165d5761165d61149b565b500690565b6000821982111561167557611675611252565b500190565b60008282101561168c5761168c611252565b50039056fea2646970667358221220f770c1ad6c9b9901f06b33c70e52f8bc71fabecae4ad9cc02fcba418562e407864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "consult(address,uint32)": {
        "params": {
          "period": "Number of seconds in the past to start calculating time-weighted average",
          "pool": "Address of Uniswap V3 pool that we want to observe"
        },
        "returns": {
          "timeWeightedAverageTick": "The time-weighted average tick from (block.timestamp - period) to block.timestamp"
        }
      },
      "getQuoteAtTick(int24,uint128,address,address)": {
        "params": {
          "baseAmount": "Amount of token to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination",
          "tick": "Tick value used to calculate the quote"
        },
        "returns": {
          "quoteAmount": "Amount of quoteToken received for baseAmount of baseToken"
        }
      }
    },
    "title": "Oracle library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "consult(address,uint32)": {
        "notice": "Fetches time-weighted average tick using Uniswap V3 oracle"
      },
      "getQuoteAtTick(int24,uint128,address,address)": {
        "notice": "Given a tick and a token amount, calculates the amount of token received in exchange"
      }
    },
    "notice": "Provides functions to integrate with V3 pool oracle",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}